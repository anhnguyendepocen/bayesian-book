y<-exp(ly)
y_norm=exp(constant+beta*base+e)+(exp(constant+beta*base+e))*((exp(alpha1*A1-1))+(exp(alpha2*A2)-1)+(exp(alpha3*A3-1)))
plot(y_norm,y)
plot(y_norm,1:100)
plot(1:100,y_norm)
base1<-(1:100)*base
fix(base1)
base1<-(1:100)*base*0.02+base
plot(base1)
plot(base1,1:100)
plot(1:100,base1)
help(mod)
help(modulus)
library(rjson)
install.packages("rjson")
library(rjson)
library(plyr)
getHistoricalWeather <- function(airport.code="SFO", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/250c641085364e5c/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for all the days specified - 10 calls per minute and 500 calls per day
date.range <- seq.Date(from=as.Date('2012-8-01'), to=as.Date('2012-8-15'), by='1 day')
# Initialize a data frame
Anglia.weather<-read.csv(file.choose())
hdwd <- data.frame()
# loop over weather station codes, thenates, and fetch weather data
for(j in 1:nrow(Anglia.weather)){
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather(Anglia.weather$Code[j], format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c(Anglia.weather$Code[j], date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempm, x$mintempm,x$precipm)))
}
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp','Precipitation')
write.csv(hdwd,file="Anglia June_July 2012.csv")
hdwd <- data.frame()
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('ICUMBRIA16', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('ICUMBRIA16', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempm, x$mintempm,x$precipm)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp','Precipitation')
write.csv(hdwd,file="Border - Lockerbie - August 2012.csv")
clc
clear
remove(rs=list())
remove(list=ls())
library(rjson)
library(plyr)
getHistoricalWeather <- function(airport.code="pws:INORFOLK36", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/250c641085364e5c/'
# compose final url
final.url <- paste(base.url, 'history_', date, 'pws:1', '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
x<-getHistoricalweather()
library(rjson)
library(plyr)
getHistoricalWeather <- function(airport.code="pws:INORFOLK36", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/250c641085364e5c/'
# compose final url
final.url <- paste(base.url, 'history_', date, 'pws:1', '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
x<-getHistoricalweather()
x<-getHistoricalWeather()
fix(x)
library(rjson)
library(plyr)
getHistoricalWeather <- function(airport.code="pws:INORFOLK36", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/250c641085364e5c/'
# compose final url
final.url <- paste(base.url, 'history_', date, 'pws:1', '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
hdwd <- data.frame()
weather.data<-getHistoricalWeather()
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c(Anglia.weather$Code[j], date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempm, x$mintempm,x$precipm)))
hdwd <- data.frame()
weather.data<-getHistoricalWeather()
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c(x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempm, x$mintempm,x$precipm)))
View(hdwd)
fix(x)
View(hdwd)
date.range <- seq.Date(from=as.Date('2013-1-1'), to=as.Date('2013-1-5'), by='1 day')
hdwd <- data.frame()
weather.data<-getHistoricalWeather("pws:INORFOLK36",format(date.range[1], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c(x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempm, x$mintempm,x$precipm)))
View(hdwd)
date.range <- seq.Date(from=as.Date('2013-1-1'), to=as.Date('2013-1-5'), by='1 day')
hdwd <- data.frame()
weather.data<-getHistoricalWeather("pws:INORFOLK36",format(date.range[1], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c(x$fog, x$rain, x$snow, x$precipm)))
View(hdwd)
View(hdwd)
fix(weather.data)
weather.data$history
weather.data$history$dailysummary
weather.data$history$dailysummary$precipm
weather.data$history$dailysummary[1]
weather.data$history$dailysummary[1]$precipm
weather.data$history$dailysummary[[1]]
weather.data$history$dailysummary[1]
y<-weather.data$history$dailysummary[1]
fix(y)
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c(x$precipm)))
View(hdwd)
date.range <- seq.Date(from=as.Date('2013-1-1'), to=as.Date('2013-1-5'), by='1 day')
hdwd <- data.frame()
weather.data<-getHistoricalWeather("pws:INORFOLK36",format(date.range[1], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c(x$precipm)))
View(hdwd)
fix(y)
date.range <- seq.Date(from=as.Date('2013-1-1'), to=as.Date('2013-1-5'), by='1 day')
hdwd <- data.frame()
weather.data<-getHistoricalWeather("pws:INORFOLK36",format(date.range[1], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c(date.range[1], x$maxtempm, x$mintempm, x$precipm)))
View(hdwd)
date.range <- seq.Date(from=as.Date('2013-1-1'), to=as.Date('2013-1-5'), by='1 day')
hdwd <- data.frame()
weather.data<-getHistoricalWeather("pws:INORFOLK36",format(date.range[1], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c('pws:INORFOLK36',date.range[1], x$maxtempm, x$mintempm, x$precipm)))
View(hdwd)
date.range <- seq.Date(from=as.Date('2013-1-1'), to=as.Date('2013-1-5'), by='1 day')
hdwd <- data.frame()
weather.data<-getHistoricalWeather("pws:INORFOLK36",format(date.range[1], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c('pws:INORFOLK36',format(date.range[1], "%Y%m%d"), x$maxtempm, x$mintempm, x$precipm)))
View(hdwd)
help(tcl)
?Sys.sleep
date.range <- seq.Date(from=as.Date('2013-1-1'), to=as.Date('2013-1-3'), by='1 day')
hdwd <- data.frame()
for(i in seq_along(date.range)){
weather.data<-getHistoricalWeather("pws:INORFOLK36",format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c('pws:INORFOLK36',format(date.range[i], "%Y%m%d"), x$maxtempm, x$mintempm, x$precipm)))
Sys.sleep(6)
}
View(hdwd)
View(hdwd)
date.range <- seq.Date(from=as.Date('2012-12-1'), to=as.Date('2013-1-3'), by='1 day')
hdwd <- data.frame()
for(i in seq_along(date.range)){
weather.data<-getHistoricalWeather("pws:INORFOLK36",format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary, function(x) c('pws:INORFOLK36',format(date.range[i], "%Y%m%d"), x$maxtempm, x$mintempm, x$precipm)))
Sys.sleep(6)
}
View(hdwd)
colnames(hdwd) <- c("Station ID", "Date", "Max temp", "Min Temp", "Precipitation")
View(hdwd)
weather.data[1]
weather.data[1]history
weather.data[1]$history
weather.data$history
weather.data$history$dailysummary
fix(y)
fix(weather.data)
weather.data$snow
weather.data$history
weather.data$history$dailysummary
weather.data$history$weeklysummary
fix(weather.data)
fix(weather.data)
rm(list=ls())
users<-read.csv(file.choose())
users<-read.csv(file.choose())
rm(list=ls())
A<-read.csv(file.choose())
install.packages("mi")
install.packages('mi')
library('mi')
install.packages(mi)
install.packages("mi")
install.packages("mi",type="source")
library('mi')
library("mi")
library(mi)
library(mi)
library(mi)
library(mi)
library(zoo)
library(robCompositions)
install.packages("robCompositions")
library(robCompositions)
B <- impKNNa(A, k = 6)
View(A)
A<-read.csv(file.choose())
B <- impKNNa(A, k = 6)
View(A)
A$sex<impKNNa(A$sex, k = 6)
View(A)
help(impKNNa)
B <- impKNNa(A, k = 3)
B <- impKNNa(A, k = 3,na.rm='TRUE')
help(read.csv)
quantile.default
xImp1 <- impCoda(A, method = "lm")
quantile.default
install.packages("mi")
.libpaths
.libPaths
.libPaths()
library(mi)
install.packages("arm")
library(mi)
libray(arm)
library(arm)
library(mi)
install.packages("installr")
require(installr)
updateR()
E<-read.csv(file.choose())
E$agesex<-(E$age)*(E$sex)
# Full model
mod_formula = default~member_A+member_B+member_L+member_Z+member_W+age+agesq+agesex+num_years_mem+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+repayment_val+repayment_term+balance_val+rate+doj_1987+doj_1992+doj_1993+doj_1994+doj_1995+doj_1996+doj_1997+doj_1998+doj_1999+doj_2000+doj_2001+doj_2002+doj_2003+doj_2004+doj_2005+doj_2006+doj_2007+doj_2008+doj_2009+doj_2010+doj_2011+doj_2012+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model1<-glm(mod_formula,data=E)
summary(model1)
#Looking at the presence of multicollinearity
library(VIF)
# Now reducing the model in its complexity according to Hendry's general-to-specific modelling
mod_formula = default~member_A+member_B+member_W+age+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E)
summary(model2)
E$agesq<-(E$age)^2
E$agesex<-(E$age)*(E$sex)
# Full model
mod_formula = default~member_A+member_B+member_L+member_Z+member_W+age+agesq+agesex+num_years_mem+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+repayment_val+repayment_term+balance_val+rate+doj_1987+doj_1992+doj_1993+doj_1994+doj_1995+doj_1996+doj_1997+doj_1998+doj_1999+doj_2000+doj_2001+doj_2002+doj_2003+doj_2004+doj_2005+doj_2006+doj_2007+doj_2008+doj_2009+doj_2010+doj_2011+doj_2012+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model1<-glm(mod_formula,data=E)
summary(model1)
#Looking at the presence of multicollinearity
library(VIF)
# Now reducing the model in its complexity according to Hendry's general-to-specific modelling
mod_formula = default~member_A+member_B+member_W+age+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E)
summary(model2)
vif(model2)
vif(mod_formula)
vif(model1)
View(E)
View(E)
corr(model1)
cor(model1)
cor(mod_formula)
cor(E)
E$agesq<-(E$age)^2
E$agesex<-(E$age)*(E$sex)
cor(E)
sum(E$age)
sum(E$agesq)
sum(E$doj_2009)
E<-read.csv(file.choose())
E$agesq<-(E$age)^2
E$agesex<-(E$age)*(E$sex)
# Full model
mod_formula = default~member_A+member_B+member_L+member_Z+member_W+age+agesq+agesex+num_years_mem+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+repayment_val+repayment_term+balance_val+rate+doj_1987+doj_1992+doj_1993+doj_1994+doj_1995+doj_1996+doj_1997+doj_1998+doj_1999+doj_2000+doj_2001+doj_2002+doj_2003+doj_2004+doj_2005+doj_2006+doj_2007+doj_2008+doj_2009+doj_2010+doj_2011+doj_2012+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model1<-glm(mod_formula,data=E)
summary(model1)
#Looking at the presence of multicollinearity
library(VIF)
# Now reducing the model in its complexity according to Hendry's general-to-specific modelling
mod_formula = default~member_A+member_B+member_W+age+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E)
summary(model2)
sum(E$doj_2009)
sum(E$age)
sum(E$agesq)
vif(model2)
cor(E)
vif(model2)
vif(model1)
sum(E)
sum(E[,2])
sum(E[,1])
class(E)
class(E$age)
class(E$agesq)
class(E$agessex)
class(E$agesex)
vif(model1)
cor(model1)
cor(E)
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
model1<-glm(mod_formula,data=E,family="binomial")
summary(model1)
mod_formula = default~member_A+member_B+member_L+member_Z+member_W+age+agesq+agesex+num_years_mem+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+repayment_val+repayment_term+balance_val+rate+doj_1987+doj_1992+doj_1993+doj_1994+doj_1995+doj_1996+doj_1997+doj_1998+doj_1999+doj_2000+doj_2001+doj_2002+doj_2003+doj_2004+doj_2005+doj_2006+doj_2007+doj_2008+doj_2009+doj_2010+doj_2011+doj_2012+dlg_2009+dlg_2010+dlg_2011+dlg_2012+agesq+agesex
model1<-glm(mod_formula,data=E,family="binomial")
summary(model1)
mod_formula = default~member_A+member_B+member_L+member_Z+member_W+age+agesq+agesex+num_years_mem+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+repayment_val+repayment_term+balance_val+rate+doj_1987+doj_1992+doj_1993+doj_1994+doj_1995+doj_1996+doj_1997+doj_1998+doj_1999+doj_2000+doj_2001+doj_2002+doj_2003+doj_2004+doj_2005+doj_2006+doj_2007+doj_2008+doj_2009+doj_2010+doj_2011+doj_2012+dlg_2009+dlg_2010+dlg_2011+dlg_2012+agesex
model1<-glm(mod_formula,data=E,family="binomial")
summary(model1)
mod_formula = default~member_A+member_B+member_L+member_Z+member_W+age+agesq+agesex+num_years_mem+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+repayment_val+repayment_term+balance_val+rate+doj_1987+doj_1992+doj_1993+doj_1994+doj_1995+doj_1996+doj_1997+doj_1998+doj_1999+doj_2000+doj_2001+doj_2002+doj_2003+doj_2004+doj_2005+doj_2006+doj_2007+doj_2008+doj_2009+doj_2010+doj_2011+doj_2012+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model1<-glm(mod_formula,data=E,family="binomial")
summary(model1)
mod_formula = default~member_A+member_B+member_W+age+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
mod_formula = default~member_A+member_B+member_W+age+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
mod_formula = default~age+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
vif(model2)
plot(model2)
mod_formula = default~age+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
mod_formula = default~age+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
mod_formula = default~member_A+member_B+member_L+member_Z+member_W+age+agesq+agesex+num_years_mem+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+repayment_val+repayment_term+balance_val+rate+doj_1987+doj_1992+doj_1993+doj_1994+doj_1995+doj_1996+doj_1997+doj_1998+doj_1999+doj_2000+doj_2001+doj_2002+doj_2003+doj_2004+doj_2005+doj_2006+doj_2007+doj_2008+doj_2009+doj_2010+doj_2011+doj_2012+dlg_2009+dlg_2010+dlg_2011+dlg_2012+agesq+agesex
model1<-glm(mod_formula,data=E,family="binomial")
summary(model1)
formula = default~age+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
mod_formula = default~age+sex+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
mod_formula = default~age+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model2<-glm(mod_formula,data=E,family="binomial")
summary(model2)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
describe(E)
install.packages("pastecs")
library(pastecs)
stat.desc(E)
describe(E)
mod_formula = default~age+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012+repayment_val
summary(model3)
model3<-glm(mod_formula,data=E,family="binomial")
summary(model3)
mod_formula = default~age+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012+repayment_term
model3<-glm(mod_formula,data=E,family="binomial")
summary(model3)
View(E)
View(E)
View(E)
View(A)
help(predict)
newdata1 = data.Frame(age=2)
newdata1 = Data.Frame(age=2)
mean(E$balance_preloan)
mean(E$last_loanval)
mean(E$rate)
newdata1 = c(23,50,293.2,598.5,1,0,2000,12.7,0,0,0,0)
predict(model3,newdata=newdata1)
newdata1 = data.frame(age,imd,balance_preloan,last_loanval,monthly_dummy,weekyl_dummy,balance_val,rate,dlg_2009,dlg_2010,dlg_2011,dlg_2012)
age = c(23,49)
imd = c(50,6)
balance_preloan=c(293.2,293.2)
last_loanval = c(598.5,598.5)
monthly_dummy = c(1,0)
weekly_dummy = c(0,1)
balance_val = c(2000,500)
rate = c(12.7,26.8)
dlg_2009 = c(0,0)
dlg_2010 = c(0,0)
dlg_2011 = c(0,0)
dlg_2012 = c(0,0)
newdata1 = data.frame(age,imd,balance_preloan,last_loanval,monthly_dummy,weekyl_dummy,balance_val,rate,dlg_2009,dlg_2010,dlg_2011,dlg_2012)
newdata1 = data.frame(age,imd,balance_preloan,last_loanval,monthly_dummy,weekly_dummy,balance_val,rate,dlg_2009,dlg_2010,dlg_2011,dlg_2012)
predict(model3,newdata=newdata1)
mod_formula = default~age+imd+balance_preloan+last_loanval+monthly_dummy+weekly_dummy+balance_val+rate+dlg_2009+dlg_2010+dlg_2011+dlg_2012
model3<-glm(mod_formula,data=E,family="binomial")
summary(model3)
newdata1 = data.frame(age,imd,balance_preloan,last_loanval,monthly_dummy,weekly_dummy,balance_val,rate,dlg_2009,dlg_2010,dlg_2011,dlg_2012)
predict(model3,newdata=newdata1)
predict(model3,newdata=newdata1,family="binomial")
predict(model3,newdata=newdata1,family="binomial",type="response")
rm(list=ls())
clear
clc
install.packages("igraph")
library(igraph)
graph<-read.graph(file.choose(), format="dl")
graph<-read.graph(file.choose(), format="dl")
V(graph)$name
plot(graph,vertex.label=V(graph)$name)
plot(graph, layout=layout.fruchterman.reingold, vertex.label.dist=0, vertex.size=1, vertex.label="")
graph.density(graph, loops=FALSE)
average.path.length(graph, directed=FALSE, unconnected=TRUE)
transitivity(graph, type=c("undirected"), vids=NULL)
diameter(graph, directed = FALSE, unconnected = TRUE, weights = NULL)
degree<-degree.distribution(graph, cumulative = FALSE)
degree[1]=NA
plot(degree, type="l", col="red", xlab="Degree", ylab="Relative frequency", lwd=4)
bet<-betweenness(graph, v=V(graph), directed = FALSE)
hist(bet)
paste(V(graph)$name,bet)
plot(degree, type="l", col="red", xlab="Degree", ylab="Relative frequency", lwd=4)
paste(V(graph)$name,bet)
A<-read.csv(file.choose())
hist(A$1)
hist(A[,1])
hist(A[,2])
hist(A[,1])
hist(A[,2])
install.packages(R2WINBUGS)
install.packages(R2WinBUGS)
install.packages("R2WinBUGS")
library(R2WinBUGS)
pwd()
setwd("C:/Users/Ben/Dropbox/Econometrics")
schools<-read.csv("schools.csv")
J <- nrow(schools)
View(schools)
y <-schools$estimate
sigma.y <- schools$sd
data <- list("J","y","sigma.y")
sigma.y <- schools$sd
data <- list("J","y","sigma.y")
inits <- function()
list(theta=rnorm(J,0,1000), mu.theta=rnorm(1,0,100),sigma.theta=runif(1,0,100))
parameters<-c("theta","mu.theta","sigma.theta")
rm(list=ls())
schools<-read.csv("schools.csv")
J <- nrow(schools)
y <-schools$estimate
sigma.y <- schools$sd
data <- list("J","y","sigma.y")
inits <- function()
list(theta=rnorm(J,0,1000), mu.theta=rnorm(1,0,100),sigma.theta=runif(1,0,100))
parameters<-c("theta","mu.theta","sigma.theta")
schools.sim <- bugs(data,inits,parameters,"test_1.txt",n.chains=3,n.iter=1000)
schools.sim <- bugs(data,inits,parameters,"test_1.txt",n.chains=3,n.iter=1000)
schools.sim$summary
View(schools)
schools.sim <- bugs(data,inits,parameters,"test_1.txt",n.chains=3,n.iter=3000)
schools.sim$summary
bugs
help(bugs)
schools.sim <- bugs(data,inits,parameters,"test_1.txt",n.chains=1,n.iter=3000)
schools.sim$summary
schools.sim <- bugs(data,inits,parameters,"test_1.txt",n.chains=2,n.iter=3000)
schools.sim$summary
J
help(rnorm)
rnorm(2)
theta[sim,]
theta[1,]
schools.sim$theta
attach.all(schools.sim$sims.list)
sigma.theta
theta
y.rep <- array(NA, c(n.sims, J))
y.rep <- array(NA, c("n.sims", "J"))
y.rep <- array(NA, c(n.sims, J))
n.sims
attach.all(schools.sim$sims.list)
n.sims
y.rep <- array(NA, c(schools.sim$n.sims, J))
for (sim in 1:schools.sim$n.sims)
{
y.rep[sim,]<- rnorm(J,theta[sim,],sigma,y)
}
y.rep <- array(NA, c(schools.sim$n.sims, J))
for (sim in 1:schools.sim$n.sims)
{
y.rep[sim,]<- rnorm(J,theta[sim,],sigma.y)
}
hist(y.rep[sim,])
hist(y.rep[1,])
hist(y.rep[100,])
hist(y.rep[1000,])
par (mfrow=c(5,4), mar=c(4,4,2,2))
hist(y,xlab="",main="y")
par (mfrow=c(5,4), mar=c(4,4,2,2))
hist(y,xlab="",main="y")
for (sim in 1:19)
hist(y.rep[sim,],xlab="",main=paste("y.rep",sim))
par (mfrow=c(5,4), mar=c(3,3,2,2))
hist(y,xlab="",main="y")
for (sim in 1:19)
hist(y.rep[sim,],xlab="",main=paste("y.rep",sim))
par (mfrow=c(5,4), mar=c(3,3,2,2))
hist(y,xlab="",main="y")
for (sim in 2:20)
hist(y.rep[sim,],xlab="",main=paste("y.rep",sim))
